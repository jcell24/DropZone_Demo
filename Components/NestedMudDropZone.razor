@typeparam TDropItem
@inherits MudDropZone<DropItemBase>
@using MudBlazor

<MudDropZone T="TDropItem"
             Identifier="@Identifier"
             AllowReorder="true"
             Class="@Class"
             Style="border-color: var(--mud-palette-text-primary)">
    <ItemRenderer>
        @{
            //string discardStyle = (ReferenceEquals(context, _currentItem) && _hoveringDiscard) ? "mud-error-text mud-border-error" : "";

            if (context is DropItemEndpoint endpoint)
            {
                @endpoint.UniqueGuid
                <MudDynamicDropItem T="DropItemBase" Item="@endpoint" DraggingClass="mud-primary-text mud-border-primary">
                    <div class="d-flex align-center pa-3 ma-2 border-solid border-2 rounded-xl">
                        @endpoint.ServiceId.@endpoint.Name
                    </div>
                </MudDynamicDropItem>
            }
            else if (context is DropItemLogic logicItem)
            {
                @logicItem.UniqueGuid
                <MudDynamicDropItem T="DropItemBase" Item="@logicItem" DraggingClass="mud-primary-text mud-border-primary">
                    <NestedMudDropZone TDropItem="TDropItem"
                                       NewIdentifier="@(logicItem.UniqueGuid.ToString())"/>
                </MudDynamicDropItem>
            }
            else if (context is DropItemBase baseItem)
            {
                <MudDynamicDropitem T="DropItemBase" Item="@baseItem" DraggingClass="mud-primary-text mud-border-primary">
                    <div class="d-flex align-center pa-3 ma-2 border-solid border-2 rounded-xl">
                        @baseItem.Name
                    </div>
                </MudDynamicDropitem>
            }
        }
    </ItemRenderer>

</MudDropZone>
