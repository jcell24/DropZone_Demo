@page "/"
@using DropZone_Demo.Components.Layout
@using DropZone_Demo.Models

<PageTitle>Dropzone Demo</PageTitle>

<MudDropContainer T="DropItemBase"
				  Items="_items"
				  ItemsSelector="@((item, zone) => item.ZoneId == zone)"
				  ItemPicked="OnItemPicked"
				  ItemDropped="OnItemDropped"
				  Class="d-flex flex-column">
	<ChildContent>
		<MudDrawer id="nav-drawer" 
				   Open="true" 
				   ClipMode="DrawerClipMode.Always" 
				   Elevation="2">
			<NavMenu />
		</MudDrawer>

		<div class="d-flex flex-column flex-grow-1 overflow-hidden" style="height: 90vh; width: 100%; position: relative">
			<MudDropZone T="DropItemBase"
						 Identifier="Collected"
						 @ondragend="() => _hoveringDiscard = false"
						 AllowReorder="true"
						 Class="collected-zone"
						 Style="border-color: var(--mud-palette-text-primary)">
				<ItemRenderer>
					@{
						string discardStyle = (ReferenceEquals(context, _currentItem) && _hoveringDiscard) ? "mud-error-text mud-border-error" : "";

						if (context is DropItemEndpoint endpoint)
						{
							<MudDynamicDropItem T="DropItemBase" Item="@context" DraggingClass="mud-primary-text mud-border-primary">
								@context.UniqueGuid
								<div class="d-flex align-center pa-3 ma-2 border-solid border-2 rounded-xl @(discardStyle)">
									@endpoint.ServiceId.@endpoint.Name
								</div>
							</MudDynamicDropItem>
						}
						else if (context is DropItemIf ifItem)
						{
							<MudDynamicDropItem T="DropItemBase" Item="@context" DraggingClass="mud-primary-text mud-border-primary">
								@context.UniqueGuid
								<NestedMudDropZone TDropItem="DropItemBase"
												   NewIdentifier="@(logicItem.UniqueGuid.ToString())" />
							</MudDynamicDropItem>
						}
						else
						{
							<MudDynamicDropItem T="DropItemBase" Item="@context" DraggingClass="mud-primary-text mud-border-primary">
								@context.UniqueGuid
								<div class="d-flex align-center pa-3 ma-2 border-solid border-2 rounded-xl @(discardStyle)">
									@context.Name
								</div>
							</MudDynamicDropItem>
						}
					}
				</ItemRenderer>
			</MudDropZone>

			<div class="@(_showDiscard ? "discard-wrapper" : "discard-wrapper slide-out")">
				<MudDropZone T="DropItemBase"
							 Identifier="Discard"
							 @ondragenter="() => _hoveringDiscard = true"
							 @ondragleave="() => _hoveringDiscard = false"
							 Class="d-flex align-center justify-center rounded-lg mud-alert-text-error"
							 Style="height: inherit">
								<MudText Typo="Typo.h4"
										 Class="ma-2"
										 Style="pointer-events: none">
									Discard
								</MudText>
								<MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Large" Style="pointer-events: none" />
				</MudDropZone>
			</div>
		</div>
	</ChildContent>

</MudDropContainer>
